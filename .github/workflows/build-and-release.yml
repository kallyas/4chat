name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Push events to tags matching v*, i.e., v1.0.0, v20.15.10
    branches:
      - main  # Run on main branch updates (but won't create release)
  pull_request:
    branches:
      - main  # Run on PR to main branch (for testing)
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build Debian Package
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for tags and branches
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            libssl-dev \
            fakeroot \
            devscripts \
            debhelper \
            lintian
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Determine version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove the 'v' prefix
            IS_RELEASE=true
          else
            # For non-tag builds, use date and short commit hash
            COMMIT_HASH=$(git rev-parse --short HEAD)
            BUILD_DATE=$(date +'%Y%m%d')
            VERSION="0.dev${BUILD_DATE}.${COMMIT_HASH}"
            IS_RELEASE=false
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"
          
          # Update version in build script
          sed -i "s/VERSION=\".*\"/VERSION=\"${VERSION}\"/" build.sh
      
      - name: Build package
        run: |
          chmod +x build.sh
          ./build.sh --with-server
      
      - name: Run Lintian (Debian package validator)
        run: |
          lintian --no-tag-display-limit blackchat_*.deb || true  # Continue even if warnings
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: 4Chat-debian-package
          path: blackchat_*.deb
          retention-days: 7
      
      - name: Upload Docker files
        uses: actions/upload-artifact@v3
        with:
          name: 4Chat-docker-files
          path: |
            Dockerfile
            docker-compose.yml
            requirements-server.txt
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: 4Chat-debian-package
      
      - name: Download Docker artifacts
        uses: actions/download-artifact@v3
        with:
          name: 4Chat-docker-files
      
      - name: Create release archive
        run: |
          VERSION=${{ github.ref_name }}
          VERSION="${VERSION#v}"  # Remove the 'v' prefix
          
          # Create Docker archive
          tar -czf 4Chat-server-docker-${VERSION}.tar.gz Dockerfile docker-compose.yml requirements-server.txt
          
          # Show files to be uploaded
          ls -la
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: 4Chat ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## 4Chat ${{ github.ref_name }}
            
            ### Installation
            
            #### Debian/Ubuntu
            ```bash
            sudo dpkg -i blackchat_${{ env.VERSION }}_amd64.deb
            sudo apt-get install -f  # Install dependencies if needed
            ```
            
            #### Server Deployment
            ```bash
            # Extract server files
            tar -xzf 4Chat-server-docker-${{ env.VERSION }}.tar.gz
            
            # Start server with Docker Compose
            docker-compose up -d
            ```
            
            ### Changelog
            - See the [CHANGELOG.md](https://github.com/4insec/4Chat/blob/main/CHANGELOG.md) for details
          files: |
            blackchat_*.deb
            4Chat-server-docker-*.tar.gz